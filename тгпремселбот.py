import telebot
from telebot import types

API_TOKEN = '7642894929:AAErc1k42W3_iCsX3aMchpti-pIlM-Ij_sY'
bot = telebot.TeleBot(API_TOKEN)

admin_id = 5749521046  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = [5749521046]  # –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
custom_buttons = {}
start_message = "üíé–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–µ–º–∏—É–º–∞üíé"  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /start
preset_buttons = {
    "üõí–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–ø–∏—Å–æ–∫": "premium_catalog",
    "üìú–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫—É–ø–∫–∏": "https://telegra.ph/Pravila-pokupki-12-08-2"
}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.from_user.id not in users:
        users.append(message.from_user.id)

    sticker_id = 'CAACAgIAAxkBAAKPh2dV7zdq_20aPaMmupBu9YK6lmL1AAJMXwACEXSwSohDkpKt9mK3NgQ'
    bot.send_sticker(message.chat.id, sticker_id)

    keyboard = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for name, text in custom_buttons.items():
        keyboard.add(types.InlineKeyboardButton(name, callback_data='custom_message:' + name))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    for name, callback_data in preset_buttons.items():
        if callback_data.startswith('http'):
            keyboard.add(types.InlineKeyboardButton(name, url=callback_data))
        else:
            keyboard.add(types.InlineKeyboardButton(name, callback_data=callback_data))

    bot.send_message(message.chat.id, start_message, reply_markup=keyboard)

@bot.message_handler(commands=['adminlurkink'])
def admin_lurkink(message):
    if message.from_user.id == admin_id:
        bot.send_message(message.chat.id, "–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞")
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /start", callback_data='edit_start_message'))
        keyboard.add(types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data='input_message'))
        keyboard.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É", callback_data='create_button'))
        keyboard.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data='delete_button'))

        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

@bot.callback_query_handler(func=lambda call: call.data == 'edit_start_message')
def prompt_edit_start_message(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start:")
    bot.register_next_step_handler(call.message, process_edit_start_message)

def process_edit_start_message(message):
    global start_message
    start_message = message.text
    bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /start –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n{start_message}")

@bot.callback_query_handler(func=lambda call: call.data == 'delete_button')
def prompt_delete_button(call):
    keyboard = types.InlineKeyboardMarkup()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    for name in custom_buttons.keys():
        keyboard.add(types.InlineKeyboardButton(name, callback_data='confirm_delete:' + name))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    keyboard.add(types.InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–º–∏—É–º–æ–≤", callback_data='confirm_delete:premium_catalog'))
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫—É–ø–∫–∏", callback_data='confirm_delete:rules'))

    keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_menu'))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete:'))
def confirm_delete(call):
    button_name = call.data.split(':', 1)[1]
    if button_name in custom_buttons:
        del custom_buttons[button_name]
        bot.send_message(call.message.chat.id, f"–ö–Ω–æ–ø–∫–∞ '{button_name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!")
        update_start_keyboard()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    elif button_name == 'premium_catalog':
        bot.send_message(call.message.chat.id, "–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–º–∏—É–º–æ–≤' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.")
    elif button_name == 'rules':
        bot.send_message(call.message.chat.id, "–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫—É–ø–∫–∏' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.send_message(call.message.chat.id, "–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_menu')
def show_admin_menu(call):
    admin_lurkink(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'input_message')
def prompt_for_message(call):
    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    bot.register_next_step_handler(call.message, process_message_input)

def process_message_input(message):
    text_to_broadcast = message.text
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–î–∞", callback_data='confirm_broadcast:' + text_to_broadcast), 
                 types.InlineKeyboardButton("–ù–µ—Ç", callback_data='cancel_broadcast'))

    bot.send_message(message.chat.id, "–í—ã –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'create_button')
def start_create_button(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:")
    bot.register_next_step_handler(call.message, process_button_name)

def process_button_name(message):
    button_name = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:")
    bot.register_next_step_handler(message, process_button_message, button_name)

def process_button_message(message, button_name):
    message_text = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –∏ –µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    custom_buttons[button_name] = message_text

    bot.send_message(message.chat.id, f"–ö–Ω–æ–ø–∫–∞ '{button_name}' —Å–æ–∑–¥–∞–Ω–∞!")
    update_start_keyboard()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏

@bot.callback_query_handler(func=lambda call: call.data.startswith('custom_message:'))
def handle_custom_message(call):
    button_name = call.data.split(':', 1)[1]
    message_text = custom_buttons.get(button_name, "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    bot.send_message(call.message.chat.id, message_text)

def update_start_keyboard():
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in users:
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
            for name, text in custom_buttons.items():
                keyboard.add(types.InlineKeyboardButton(name, callback_data='custom_message:' + name))

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            for name, callback_data in preset_buttons.items():
            	
                if callback_data.startswith('http'):
                    keyboard.add(types.InlineKeyboardButton(name, url=callback_data))
                else:
                    keyboard.add(types.InlineKeyboardButton(name, callback_data=callback_data))

            bot.send_message(user_id, start_message, reply_markup=keyboard)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_broadcast:'))
def confirm_broadcast(call):
    text_to_broadcast = call.data.split(':', 1)[1]
    bot.send_message(call.message.chat.id, "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É!(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")

    for user_id in users:
        try:
            bot.send_message(user_id, text_to_broadcast)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_broadcast')
def cancel_broadcast(call):
    bot.send_message(call.message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'premium_catalog')
def send_catalog(call):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚≠ê1 –º–µ—Å—è—Ü", callback_data='1_month'), 
                 types.InlineKeyboardButton("üí´3 –º–µ—Å—è—Ü–∞", callback_data='3_month'))
    keyboard.add(types.InlineKeyboardButton("üåü6 –º–µ—Å—è—Ü–µ–≤", callback_data='6_month'), 
                 types.InlineKeyboardButton("‚ú®12 –º–µ—Å—è—Ü–µ–≤", callback_data='12_month'))

    bot.send_message(call.message.chat.id, "üõí–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–µ–º–∏—É–ºüõí", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ['1_month', '3_month', '6_month', '12_month'])
def handle_premium_month(call):
    month = call.data
    price_info = {
        '1_month': """üõí–¢–æ–≤–∞—Ä: –ø—Ä–µ–º–∏—É–º 1 –º–µ—Å—è—Ü.
\nüí∞–¶–µ–Ω–∞: 4$/400‚ÇΩ\n
üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: http://t.me/send?start=IVWPEvN98HG7""",
        '3_month': """üõí–¢–æ–≤–∞—Ä: –ø—Ä–µ–º–∏—É–º 3 –º–µ—Å—è—Ü–∞.
\nüí∞–¶–µ–Ω–∞: 14$/1400‚ÇΩ\n
üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: http://t.me/send?start=IVl3EY9mJwSg""",
        '6_month': """üõí–¢–æ–≤–∞—Ä: –ø—Ä–µ–º–∏—É–º 6 –º–µ—Å—è—Ü–µ–≤.
\nüí∞–¶–µ–Ω–∞: 18.5$/1850‚ÇΩ\n
üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: http://t.me/send?start=IVLWTYiOb2Ix""",
        '12_month': "üõí–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è"
    }

    if month in price_info:
        if month == '12_month':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("üí≥–ö–∞—Ä—Ç–∞", callback_data='payment_card'))
            keyboard.add(types.InlineKeyboardButton("üéÅ–ì–∏—Ñ—Ç", callback_data='payment_gift'))
            bot.send_message(call.message.chat.id, price_info[month], reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id, price_info[month] + ".", reply_markup=create_payment_keyboard())
    else:
        bot.send_message(call.message.chat.id, "üìõ–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")

@bot.callback_query_handler(func=lambda call: call.data == 'payment_card')
def handle_payment_card(call):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É
    payment_link = "http://t.me/send?start=IVhnsslbUzQ1"
    keyboard = create_payment_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª"
    bot.send_message(call.message.chat.id, f"""üõí–¢–æ–≤–∞—Ä: –ø—Ä–µ–º–∏—É–º 12 –º–µ—Å—è—Ü–µ–≤.
\nüí∞–¶–µ–Ω–∞: 25$/2500‚ÇΩ\n
üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment_link}""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'payment_gift')
def handle_payment_gift(call):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –≥–∏—Ñ—Ç
    payment_link = "http://t.me/send?start=IVoC5DHDieyP"
    keyboard = create_payment_keyboard() 
    bot.send_message(call.message.chat.id, f"""üõí–¢–æ–≤–∞—Ä: –ø—Ä–µ–º–∏—É–º 12 –º–µ—Å—è—Ü–∞.
\nüí∞–¶–µ–Ω–∞: 33$/3300‚ÇΩ\n
üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment_link}""", reply_markup=keyboard)
    
@bot.callback_query_handler(func=lambda call: call.data == 'paid')
def handle_paid(call):
    bot.send_message(call.message.chat.id, "‚ùó–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @frofy")

def create_payment_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üí∏–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='paid'))
    return keyboard

if __name__ == '__main__':
    bot.polling(none_stop=True)